name: Process Golf Booking Queue

on:
  schedule:
    # Run every morning at 6:55 AM
    - cron: '55 10 * * *'
  
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  process-booking-queue:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_AVAILABLE: ${{ secrets.DISCORD_WEBHOOK_URL != '' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # This caches the global npm cache
      
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      
      - name: Cache Playwright browsers
        id: cache-playwright-browsers # Added id
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      
      - name: Install project dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
          
      - name: Install Playwright browser and OS dependencies
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true' # Added conditional
        run: |
          npx playwright install chromium
          npx playwright install-deps chromium
  
      - name: Wait until 7:00 AM
        if: github.event_name == 'schedule'
        run: |
          current_time=$(date +%s)
          target_time=$(date -u -d "today 11:00:00" +%s)
          
          # If current time is already past 11:00 AM UTC, don't wait
          if [ $current_time -lt $target_time ]; then
            sleep_seconds=$((target_time - current_time))
            echo "Waiting for $sleep_seconds seconds until 11:00 AM UTC..."
            sleep $sleep_seconds
          else
            echo "It's already past 11:00 AM UTC, proceeding immediately"
          fi

      - name: Process booking queue
        id: process-queue
        run: |
          npx ts-node process-queue.ts
        env:
          GOLF_USERNAME: ${{ secrets.GOLF_USERNAME }}
          GOLF_PASSWORD: ${{ secrets.GOLF_PASSWORD }}
          DATE_OVERRIDE: ${{ secrets.DATE_OVERRIDE }}
          TAKE_SCREENSHOTS: ${{ secrets.TAKE_SCREENSHOTS }}
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: ${{ env.TAKE_SCREENSHOTS != 'false' }}
        with:
          name: booking-screenshots
          path: logs/*.png
          if-no-files-found: ignore
          retention-days: 7
      
      - name: Commit updated queue
        id: auto_commit_queue # Added id
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update booking queue after processing
          file_pattern: booking-queue.json
      
      - name: Prepare screenshot list for Discord
        id: list_screenshots
        if: ${{ env.TAKE_SCREENSHOTS != 'false' }}
        run: |
          # This script finds *.png files in logs/ and creates a comma-separated list.
          # It handles cases where no png files are found or the logs/ directory doesn't exist.
          shopt -s nullglob # Ensures that if no files match, the array is empty
          files_array=(logs/*.png)
          shopt -u nullglob # Reset nullglob

          if [ ${#files_array[@]} -eq 0 ]; then
            echo "No screenshots found to send to Discord."
            echo "files_list=" >> $GITHUB_OUTPUT
          else
            # Join array elements with comma
            joined_files=$(printf ",%s" "${files_array[@]}")
            joined_files=${joined_files:1} # Remove leading comma
            echo "Screenshots to send: $joined_files"
            echo "files_list=$joined_files" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Send Images to Discord
        if: ${{ env.DISCORD_WEBHOOK_AVAILABLE && steps.list_screenshots.outputs.files_list != '' }}
        uses: MineBartekSA/discord-webhook@v2
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          content: "Job finished! Here are the screenshots from the booking process:"
          attachment: ${{ steps.list_screenshots.outputs.files_list }}
